import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../models/book.dart';

/// Book Service for Firestore Operations
///
/// Handles all book-related database operations including:
/// - Real-time book listing
/// - Book detail retrieval
/// - CRUD operations for future modules
class BookService {
  static final BookService _instance = BookService._internal();
  factory BookService() => _instance;
  BookService._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const String _booksCollection = 'books';

  // ==================== REAL-TIME DATA STREAMS ====================

  /// Get real-time stream of all books
  Stream<List<Book>> getBooksStream() {
    try {
      if (kDebugMode) {
        print('üìö BookService: Starting books stream');
      }

      return _firestore
          .collection(_booksCollection)
          .orderBy('createdAt', descending: true)
          .snapshots()
          .map((snapshot) {
            final books = snapshot.docs
                .map((doc) => Book.fromFirestore(doc))
                .toList();

            if (kDebugMode) {
              print(
                'üìö BookService: Loaded ${books.length} books from Firestore',
              );
            }

            return books;
          });
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getBooksStream: $e');
      }
      throw 'Kitaplar y√ºklenirken hata olu≈ütu: $e';
    }
  }

  /// Get real-time stream of books by category
  Stream<List<Book>> getBooksByCategoryStream(String category) {
    try {
      if (kDebugMode) {
        print('üìö BookService: Starting books stream for category: $category');
      }

      return _firestore
          .collection(_booksCollection)
          .where('category', isEqualTo: category)
          .orderBy('createdAt', descending: true)
          .snapshots()
          .map((snapshot) {
            final books = snapshot.docs
                .map((doc) => Book.fromFirestore(doc))
                .toList();

            if (kDebugMode) {
              print(
                'üìö BookService: Loaded ${books.length} books for category $category',
              );
            }

            return books;
          });
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getBooksByCategoryStream: $e');
      }
      throw 'Kategori kitaplarƒ± y√ºklenirken hata olu≈ütu: $e';
    }
  }

  // ==================== SINGLE BOOK OPERATIONS ====================

  /// Get a single book by ID
  Future<Book?> getBookById(String bookId) async {
    try {
      if (kDebugMode) {
        print('üìñ BookService: Getting book with ID: $bookId');
      }

      if (isDemoMode) {
        _initializeDemoBooks();

        // Find book in demo data
        try {
          final book = _demoBooks.firstWhere((b) => b.id == bookId);
          if (kDebugMode) {
            print('‚úÖ BookService: Demo book found: ${book.title}');
          }
          return book;
        } catch (e) {
          if (kDebugMode) {
            print('‚ö†Ô∏è BookService: Demo book not found: $bookId');
          }
          return null;
        }
      }

      final doc = await _firestore
          .collection(_booksCollection)
          .doc(bookId)
          .get();

      if (!doc.exists) {
        if (kDebugMode) {
          print('‚ö†Ô∏è BookService: Book not found: $bookId');
        }
        return null;
      }

      final book = Book.fromFirestore(doc);

      if (kDebugMode) {
        print('‚úÖ BookService: Book loaded: ${book.title}');
      }

      return book;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error getting book $bookId: $e');
      }
      throw 'Kitap detaylarƒ± y√ºklenirken hata olu≈ütu: $e';
    }
  }

  /// Get real-time stream for a single book
  Stream<Book?> getBookStreamById(String bookId) {
    try {
      if (kDebugMode) {
        print('üìñ BookService: Starting book stream for ID: $bookId');
      }

      if (isDemoMode) {
        _initializeDemoBooks();

        // Find book in demo data
        final book = _demoBooks.firstWhere(
          (b) => b.id == bookId,
          orElse: () => throw StateError('Book not found'),
        );

        if (kDebugMode) {
          print('üìñ BookService: Demo book found in stream: ${book.title}');
        }

        // Return a stream with the demo book
        return Stream.value(book);
      }

      return _firestore
          .collection(_booksCollection)
          .doc(bookId)
          .snapshots()
          .map((doc) {
            if (!doc.exists) {
              if (kDebugMode) {
                print('‚ö†Ô∏è BookService: Book not found in stream: $bookId');
              }
              return null;
            }

            final book = Book.fromFirestore(doc);

            if (kDebugMode) {
              print('üìñ BookService: Book updated in stream: ${book.title}');
            }

            return book;
          });
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in book stream $bookId: $e');
      }

      if (isDemoMode) {
        // Return null stream for demo mode if book not found
        if (kDebugMode) {
          print('‚ö†Ô∏è BookService: Demo book not found: $bookId');
        }
        return Stream.value(null);
      }

      throw 'Kitap g√ºncellemeleri alƒ±nƒ±rken hata olu≈ütu: $e';
    }
  }

  // ==================== PAGINATION SUPPORT ====================

  /// Get books with optional filtering and pagination
  Future<List<Book>> getBooks({
    int page = 1,
    int limit = 20,
    String? category,
    String? searchQuery,
  }) async {
    if (kDebugMode) {
      print(
        'üìö BookService: Getting books - page: $page, limit: $limit, category: $category, search: $searchQuery',
      );
    }

    if (isDemoMode) {
      _initializeDemoBooks();

      List<Book> books = List.from(_demoBooks);

      // Apply category filter
      if (category != null && category.isNotEmpty) {
        books = books
            .where(
              (book) => book.category.toLowerCase() == category.toLowerCase(),
            )
            .toList();
      }

      // Apply search filter
      if (searchQuery != null && searchQuery.isNotEmpty) {
        final query = searchQuery.toLowerCase();
        books = books
            .where(
              (book) =>
                  book.title.toLowerCase().contains(query) ||
                  book.author.toLowerCase().contains(query) ||
                  book.description.toLowerCase().contains(query),
            )
            .toList();
      }

      // Apply pagination
      final startIndex = (page - 1) * limit;
      final endIndex = startIndex + limit;

      if (startIndex >= books.length) {
        return [];
      }

      final paginatedBooks = books.sublist(
        startIndex,
        endIndex > books.length ? books.length : endIndex,
      );

      if (kDebugMode) {
        print('üìö BookService: Loaded ${paginatedBooks.length} demo books');
      }

      return paginatedBooks;
    }

    try {
      Query query = _firestore.collection(_booksCollection);

      // Apply category filter
      if (category != null && category.isNotEmpty) {
        query = query.where('category', isEqualTo: category);
      }

      // Apply search filter
      if (searchQuery != null && searchQuery.isNotEmpty) {
        // Simple search implementation - can be improved with Algolia or similar
        query = query
            .where('title', isGreaterThanOrEqualTo: searchQuery)
            .where('title', isLessThanOrEqualTo: '$searchQuery\uf8ff');
      }

      // Apply pagination
      query = query.limit(limit);
      if (page > 1) {
        // Note: Firestore offset is not recommended for large datasets
        // Consider using cursor-based pagination for production
        final skipCount = (page - 1) * limit;
        // Firestore doesn't have direct offset, so we'll implement a simple version
        query = query.limit(limit + skipCount);
      }

      final querySnapshot = await query.get();
      List<Book> books = querySnapshot.docs
          .map((doc) => Book.fromFirestore(doc))
          .toList();

      // If we used limit + skipCount, remove the first skipCount items
      if (page > 1) {
        final skipCount = (page - 1) * limit;
        books = books.skip(skipCount).toList();
      }

      if (kDebugMode) {
        print('üìö BookService: Loaded ${books.length} books');
      }

      return books;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error getting books: $e');
      }
      rethrow;
    }
  }

  /// Get featured books
  Future<List<Book>> getFeaturedBooks({int limit = 10}) async {
    if (kDebugMode) {
      print('üìö BookService: Getting featured books');
    }

    if (isDemoMode) {
      _initializeDemoBooks();

      // Return first few books as featured
      final featuredBooks = _demoBooks.take(limit).toList();

      if (kDebugMode) {
        print(
          'üìö BookService: Loaded ${featuredBooks.length} demo featured books',
        );
      }

      return featuredBooks;
    }

    try {
      final querySnapshot = await _firestore
          .collection(_booksCollection)
          .where('isFeatured', isEqualTo: true)
          .orderBy('createdAt', descending: true)
          .limit(limit)
          .get();

      final books = querySnapshot.docs
          .map((doc) => Book.fromFirestore(doc))
          .toList();

      if (kDebugMode) {
        print('üìö BookService: Loaded ${books.length} featured books');
      }

      return books;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error getting featured books: $e');
      }
      rethrow;
    }
  }

  /// Get popular books
  Future<List<Book>> getPopularBooks() async {
    try {
      final snapshot = await _firestore
          .collection(_booksCollection)
          .orderBy('readCount', descending: true)
          .limit(10)
          .get();

      return snapshot.docs.map((doc) => Book.fromFirestore(doc)).toList();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getPopularBooks: $e');
      }
      return [];
    }
  }

  /// Get new books
  Future<List<Book>> getNewBooks() async {
    try {
      final snapshot = await _firestore
          .collection(_booksCollection)
          .orderBy('createdAt', descending: true)
          .limit(10)
          .get();

      return snapshot.docs.map((doc) => Book.fromFirestore(doc)).toList();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getNewBooks: $e');
      }
      return [];
    }
  }

  /// Get all categories
  Future<List<String>> getAllCategories() async {
    try {
      final snapshot = await _firestore.collection(_booksCollection).get();
      final categories = snapshot.docs
          .map((doc) => doc.data()['category'] as String?)
          .where((category) => category != null)
          .cast<String>()
          .toSet()
          .toList();

      return categories;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getAllCategories: $e');
      }
      return ['Roman', 'Bilim', 'Tarih', 'Felsefe']; // Default categories
    }
  }

  /// Get all authors
  Future<List<String>> getAllAuthors() async {
    try {
      final snapshot = await _firestore.collection(_booksCollection).get();
      final authors = snapshot.docs
          .map((doc) => doc.data()['author'] as String?)
          .where((author) => author != null)
          .cast<String>()
          .toSet()
          .toList();

      return authors;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getAllAuthors: $e');
      }
      return ['Orhan Pamuk', 'Sabahattin Ali']; // Default authors
    }
  }

  /// Search books
  Future<List<Book>> searchBooks(String query) async {
    try {
      if (query.isEmpty) return [];

      final snapshot = await _firestore
          .collection(_booksCollection)
          .where('title', isGreaterThanOrEqualTo: query)
          .where('title', isLessThanOrEqualTo: '$query\uf8ff')
          .limit(20)
          .get();

      return snapshot.docs.map((doc) => Book.fromFirestore(doc)).toList();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in searchBooks: $e');
      }
      return [];
    }
  }

  /// Get similar books
  Future<List<Book>> getSimilarBooks(String bookId) async {
    try {
      // Get the book first to find its category
      final bookDoc = await _firestore
          .collection(_booksCollection)
          .doc(bookId)
          .get();
      if (!bookDoc.exists) return [];

      final bookData = bookDoc.data()!;
      final category = bookData['category'] as String?;

      if (category == null) return [];

      final snapshot = await _firestore
          .collection(_booksCollection)
          .where('category', isEqualTo: category)
          .limit(10)
          .get();

      return snapshot.docs
          .where((doc) => doc.id != bookId) // Exclude the current book
          .map((doc) => Book.fromFirestore(doc))
          .toList();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getSimilarBooks: $e');
      }
      return [];
    }
  }

  /// Get books by author
  Future<List<Book>> getBooksByAuthor(String author) async {
    try {
      final snapshot = await _firestore
          .collection(_booksCollection)
          .where('author', isEqualTo: author)
          .get();

      return snapshot.docs.map((doc) => Book.fromFirestore(doc)).toList();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getBooksByAuthor: $e');
      }
      return [];
    }
  }

  /// Get books by category
  Future<List<Book>> getBooksByCategory(String category) async {
    try {
      final snapshot = await _firestore
          .collection(_booksCollection)
          .where('category', isEqualTo: category)
          .get();

      return snapshot.docs.map((doc) => Book.fromFirestore(doc)).toList();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getBooksByCategory: $e');
      }
      return [];
    }
  }

  /// Increment read count
  Future<void> incrementReadCount(String bookId) async {
    try {
      await _firestore.collection(_booksCollection).doc(bookId).update({
        'readCount': FieldValue.increment(1),
      });
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in incrementReadCount: $e');
      }
    }
  }

  /// Update book rating
  Future<void> updateBookRating(String bookId, double newRating) async {
    try {
      await _firestore.collection(_booksCollection).doc(bookId).update({
        'rating': newRating,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in updateBookRating: $e');
      }
    }
  }

  /// Get free books
  Future<List<Book>> getFreeBooks() async {
    try {
      final snapshot = await _firestore
          .collection(_booksCollection)
          .where('price', isEqualTo: 0)
          .limit(20)
          .get();

      return snapshot.docs.map((doc) => Book.fromFirestore(doc)).toList();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getFreeBooks: $e');
      }
      return [];
    }
  }

  /// Get books by price range
  Future<List<Book>> getBooksByPriceRange(
    double minPrice,
    double maxPrice,
  ) async {
    try {
      final snapshot = await _firestore
          .collection(_booksCollection)
          .where('price', isGreaterThanOrEqualTo: minPrice)
          .where('price', isLessThanOrEqualTo: maxPrice)
          .get();

      return snapshot.docs.map((doc) => Book.fromFirestore(doc)).toList();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error in getBooksByPriceRange: $e');
      }
      return [];
    }
  }

  // ==================== CRUD OPERATIONS (Future Use) ====================

  /// Add a new book (Admin function)
  Future<String> addBook(Book book) async {
    try {
      if (kDebugMode) {
        print('‚ûï BookService: Adding new book: ${book.title}');
      }

      final docRef = await _firestore
          .collection(_booksCollection)
          .add(book.toMap());

      if (kDebugMode) {
        print('‚úÖ BookService: Book added with ID: ${docRef.id}');
      }

      return docRef.id;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error adding book: $e');
      }
      throw 'Kitap eklenirken hata olu≈ütu: $e';
    }
  }

  /// Update an existing book (Admin function)
  Future<void> updateBook(String bookId, Book book) async {
    try {
      if (kDebugMode) {
        print('üìù BookService: Updating book: $bookId');
      }

      await _firestore
          .collection(_booksCollection)
          .doc(bookId)
          .update(book.toMap());

      if (kDebugMode) {
        print('‚úÖ BookService: Book updated: $bookId');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error updating book: $e');
      }
      throw 'Kitap g√ºncellenirken hata olu≈ütu: $e';
    }
  }

  /// Delete a book (Admin function)
  Future<void> deleteBook(String bookId) async {
    try {
      if (kDebugMode) {
        print('üóëÔ∏è BookService: Deleting book: $bookId');
      }

      await _firestore.collection(_booksCollection).doc(bookId).delete();

      if (kDebugMode) {
        print('‚úÖ BookService: Book deleted: $bookId');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error deleting book: $e');
      }
      throw 'Kitap silinirken hata olu≈ütu: $e';
    }
  }

  // ==================== UTILITY METHODS ====================

  /// Check if books collection exists and has data
  Future<bool> hasBooksData() async {
    try {
      final snapshot = await _firestore
          .collection(_booksCollection)
          .limit(1)
          .get();

      return snapshot.docs.isNotEmpty;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error checking books data: $e');
      }
      return false;
    }
  }

  /// Get total books count
  Future<int> getBooksCount() async {
    try {
      final snapshot = await _firestore.collection(_booksCollection).get();

      return snapshot.docs.length;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå BookService: Error getting books count: $e');
      }
      return 0;
    }
  }

  // Demo mode for testing - Always true to support all users
  bool get isDemoMode => true;

  // In-memory storage for demo books
  static final List<Book> _demoBooks = [];

  /// Initialize demo books
  void _initializeDemoBooks() {
    if (_demoBooks.isEmpty) {
      _demoBooks.addAll([
        Book(
          id: '1',
          title: 'Su√ß ve Ceza',
          author: 'Fyodor Dostoyevski',
          description:
              'Rus edebiyatƒ±nƒ±n ba≈üyapƒ±tlarƒ±ndan biri olan bu roman, su√ß i≈üleyen bir gencin ruhsal √ß√∂z√ºl√º≈ü√ºn√º anlatƒ±r.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11467526/wh:true/wi:800',
          category: 'Klasik',
          price: 25.90,
          content: _getSucVeCezaContent(),
          createdAt: DateTime.now().subtract(const Duration(days: 30)),
          updatedAt: DateTime.now().subtract(const Duration(days: 1)),
        ),
        Book(
          id: '2',
          title: 'Sava≈ü ve Barƒ±≈ü',
          author: 'Lev Tolstoy',
          description:
              'Napolyon sava≈ülarƒ± d√∂nemini konu alan bu eser, tarih ve edebiyatƒ±n bulu≈ütuƒüu muhte≈üem bir roman.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11428765/wh:true/wi:800',
          category: 'Klasik',
          price: 45.50,
          content: _getSavasVeBarisContent(),
          createdAt: DateTime.now().subtract(const Duration(days: 25)),
          updatedAt: DateTime.now().subtract(const Duration(days: 2)),
        ),
        Book(
          id: '3',
          title: '√áalƒ±ku≈üu',
          author: 'Re≈üat Nuri G√ºntekin',
          description:
              'T√ºrk edebiyatƒ±nƒ±n en sevilen romanlarƒ±ndan biri. Feride\'nin hayat hikayesi.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11388234/wh:true/wi:800',
          category: 'T√ºrk Edebiyatƒ±',
          price: 18.75,
          content: _getCalikusuContent(),
          createdAt: DateTime.now().subtract(const Duration(days: 20)),
          updatedAt: DateTime.now().subtract(const Duration(days: 3)),
        ),
        Book(
          id: '4',
          title: 'Vadideki Zambak',
          author: 'Honor√© de Balzac',
          description:
              'A≈ük, tutku ve toplumsal ele≈ütirinin harmanlandƒ±ƒüƒ± bu roman, Fransƒ±z edebiyatƒ±nƒ±nÍ±∏ÏûëÏûëÏûÖÎãàÎã§.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11398765/wh:true/wi:800',
          category: 'Klasik',
          price: 22.30,
          content: _getVadidekiZambakContent(),
          createdAt: DateTime.now().subtract(const Duration(days: 18)),
          updatedAt: DateTime.now().subtract(const Duration(days: 1)),
        ),
        Book(
          id: '5',
          title: 'K√º√ß√ºk Prens',
          author: 'Antoine de Saint-Exup√©ry',
          description:
              '√áocuklarƒ±n ve yeti≈ükinlerin e≈üit sevgiyle okuduƒüu bu eser, hayatƒ±n anlamƒ±nƒ± sorgular.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11467890/wh:true/wi:800',
          category: '√áocuk',
          price: 15.90,
          content: _getKucukPrensContent(),
          createdAt: DateTime.now().subtract(const Duration(days: 15)),
          updatedAt: DateTime.now().subtract(const Duration(hours: 12)),
        ),
        Book(
          id: '6',
          title: 'ƒ∞nsan Ne ile Ya≈üar',
          author: 'Lev Tolstoy',
          description:
              'Tolstoy\'un derin felsefi d√º≈ü√ºncelerini i√ßeren bu kƒ±sa hikayeler kitabƒ±.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11445623/wh:true/wi:800',
          category: 'Felsefe',
          price: 19.45,
          createdAt: DateTime.now().subtract(const Duration(days: 12)),
          updatedAt: DateTime.now().subtract(const Duration(hours: 6)),
        ),
        Book(
          id: '7',
          title: 'Satran√ß',
          author: 'Stefan Zweig',
          description:
              'Nazi Almanya\'sƒ±nda ge√ßen bu novella, insan ruhunun derinliklerini ke≈üfeder.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11434567/wh:true/wi:800',
          category: 'Novella',
          price: 12.60,
          createdAt: DateTime.now().subtract(const Duration(days: 10)),
          updatedAt: DateTime.now().subtract(const Duration(hours: 3)),
        ),
        Book(
          id: '8',
          title: 'Beyaz Di≈ü',
          author: 'Jack London',
          description:
              'Vah≈üi doƒüada ge√ßen bu macera romanƒ±, bir kurdun evcille≈üme hikayesini anlatƒ±r.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11456789/wh:true/wi:800',
          category: 'Macera',
          price: 21.80,
          createdAt: DateTime.now().subtract(const Duration(days: 8)),
          updatedAt: DateTime.now().subtract(const Duration(hours: 1)),
        ),
        Book(
          id: '9',
          title: 'Simyacƒ±',
          author: 'Paulo Coelho',
          description:
              'Bir √ßobanƒ±n kendi efsanesini ya≈üama yolculuƒüunu anlatan bu roman, d√ºnya √ßapƒ±nda sevilir.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11478923/wh:true/wi:800',
          category: 'Modern',
          price: 24.70,
          createdAt: DateTime.now().subtract(const Duration(days: 5)),
          updatedAt: DateTime.now().subtract(const Duration(minutes: 30)),
        ),
        Book(
          id: '10',
          title: 'K√ºrk Mantolu Madonna',
          author: 'Sabahattin Ali',
          description:
              'T√ºrk edebiyatƒ±nƒ±n en g√ºzel a≈ük hikayelerinden biri. Berlin\'de ge√ßen unutulmaz bir a≈ük.',
          coverImageUrl:
              'https://img.kitapyurdu.com/v1/getImage/fn:11489034/wh:true/wi:800',
          category: 'T√ºrk Edebiyatƒ±',
          price: 16.90,
          createdAt: DateTime.now().subtract(const Duration(days: 3)),
          updatedAt: DateTime.now().subtract(const Duration(minutes: 15)),
        ),
      ]);

      if (kDebugMode) {
        print(
          'üìö BookService: Demo books initialized (${_demoBooks.length} books)',
        );
      }
    }
  }

  // ==================== DEMO CONTENT GENERATORS ====================

  String _getSucVeCezaContent() {
    return '''
B√ñL√úM 1

Temmuz ayƒ±nƒ±n son derece sƒ±cak ve bunaltƒ±cƒ± bir g√ºn√ºnde, ak≈üama doƒüru, gen√ß bir adam K--ski sokaƒüƒ±ndan √ßƒ±ktƒ± ve aƒüƒ±r aƒüƒ±r, kararsƒ±z adƒ±mlarla H-- k√∂pr√ºs√ºne y√∂neldi.

O b√ºy√ºk bir apartman dairesinde kiracƒ± olarak kalƒ±yordu, ama ev sahibesiyle kar≈üƒ±la≈ümaktan √ßekiniyordu. Kadƒ±na epey para borcu vardƒ± ve onunla kar≈üƒ±la≈ümaktan korkuyordu.

Gen√ß adamƒ±n adƒ± Rodion Romanovi√ß Raskolnikov'du. √úniversitede hukuk okuyordu, ama artƒ±k derslerine gitmiyor, okumuyordu. √áok fakir d√º≈üm√º≈ü, aylardƒ±r uygun bir i≈ü bulamamƒ±≈ütƒ±.

Bu g√ºn, tuhaf bir karar vermi≈üti. Aklƒ±ndan ge√ßen korkun√ß plana tekrar tekrar d√∂n√ºyordu. "Ben bunu yapabilir miyim?" diye kendi kendine soruyordu. "Hayƒ±r, bu imkansƒ±z... Bu sadece aptalca bir r√ºya..."

Ama yine de gidiyordu. Gittiƒüi yer belli: ya≈ülƒ± tefeci kadƒ±nƒ±n eviydi.

B√ñL√úM 2

Al√´na ƒ∞vanovna'nƒ±n kapƒ±sƒ±na geldiƒüinde ellerini titriyordu. Ya≈ülƒ± kadƒ±n olduk√ßa zengin biriydi, ama √ßok cimri ve acƒ±masƒ±zdƒ±. Raskolnikov ona daha √∂nce de bazƒ± e≈üyalarƒ±nƒ± rehin vermi≈üti.

"Yine mi geldin?" dedi ya≈ülƒ± kadƒ±n kapƒ±yƒ± a√ßarken. "Ne istiyorsun bu sefer?"

"Bir ≈üey rehin vermek istiyorum," dedi Raskolnikov titrek bir sesle.

Kadƒ±n onu i√ßeri aldƒ±. Raskolnikov cebinden k√º√ß√ºk bir g√ºm√º≈ü saat √ßƒ±kardƒ±. Bu saati babasƒ± ona vermi≈üti.

"Bu kadar az para... Bu saat √ßok deƒüerli deƒüil," dedi Al√´na ƒ∞vanovna saati incelerken.

Raskolnikov'un kafasƒ± karƒ±≈üƒ±ktƒ±. Aklƒ±ndan korkun√ß d√º≈ü√ºnceler ge√ßiyordu. "≈ûimdi mi yapmalƒ±yƒ±m?" diye d√º≈ü√ºnd√º. "Bu kadƒ±n k√∂t√º, kimse onu sevmez... Ama hayƒ±r, ben bunu yapamam..."

B√ñL√úM 3

Ertesi g√ºn Raskolnikov √ßok rahatsƒ±zdƒ±. Geceyi hi√ß uyumadan ge√ßirmi≈üti. S√ºrekli aynƒ± ≈üeyi d√º≈ü√ºn√ºyordu. Bir yandan vicdanƒ± onu su√ßluyordu, √∂te yandan akla mantƒ±ƒüa sƒ±ƒümayan fikirler zihnini kemiriyordu.

"Eƒüer ben bu i≈üi yaparsam," diye d√º≈ü√ºn√ºyordu, "bu para ile √ºniversitemi bitirebilirim. Annemle kƒ±z karde≈üime yardƒ±m edebilirim. O ya≈ülƒ± kadƒ±n zaten hi√ß kimsenin i≈üine yaramƒ±yor..."

Ama sonra kendine geliyordu: "Hayƒ±r! Bu korkun√ß bir d√º≈ü√ºnce. Ben nasƒ±l bir insana d√∂n√º≈üt√ºm? Bu d√º≈ü√ºnce bile beni rezil ediyor."

Sokaƒüa √ßƒ±ktƒ±, aimlessly dola≈ütƒ±. Nihayetinde tekrar o me≈ühur apartmana doƒüru y√ºr√ºmeye ba≈üladƒ±...
''';
  }

  String _getSavasVeBarisContent() {
    return '''
B√ñL√úM 1
Moskova, 1805

- "Eh, Prens, Cenova ve Lucca artƒ±k Buonaparte ailesinin m√ºlkleri haline geldi. Ama sizi uyarƒ±yorum, eƒüer bu sava≈ü hakkƒ±nda bahsetmeye devam etmezseniz... artƒ±k dostum deƒüilsiniz," dedi Anna Pavlovna Scherer, √áar'ƒ±n maiyetinden biri olan Prens Vasily'ye.

Bu s√∂zler 1805 yƒ±lƒ±nƒ±n Temmuz ayƒ±nda, Petersburg'daki zarif bir salonda s√∂ylenmi≈üti. Anna Pavlovna prestijli bir soir√©e veriyordu ve Rus soylularƒ±nƒ±n elit √ºyeleri burada toplanmƒ±≈ütƒ±.

"Napolyon tehlikeli bir adam," diye devam etti Anna Pavlovna. "O sadece Fransa'yƒ± deƒüil, t√ºm Avrupa'yƒ± ele ge√ßirmek istiyor."

Prens Vasily g√ºl√ºmsedi. O ya≈ülƒ±, tecr√ºbeli bir diplomattƒ±. "Anna Pavlovna, siz her zaman abartƒ±yorsunuz. Napolyon elbette tehlikeli, ama..."

B√ñL√úM 2
Rostov Ailesi

Aynƒ± d√∂nemde, Moskova'da Rostov ailesi de sava≈ü hazƒ±rlƒ±klarƒ±nƒ± konu≈üuyordu. Count ƒ∞lya Rostov zengin bir soyluydu ve √ßok misafirperver biriydi.

"Nikolenka'yƒ± orduya g√∂ndermemiz gerekiyor," dedi Countess Natalya Rostova, gen√ß oƒülu Nikolay'dan bahsederken. "O artƒ±k bir erkek ve vatanƒ±na hizmet etmeli."

Nikolay Rostov on sekiz ya≈üƒ±ndaydƒ±, gen√ß, yakƒ±≈üƒ±klƒ± ve macera seversen. Sava≈ü fikri onu heyecanlandƒ±rƒ±yordu.

"Evet anne! Ben sava≈ümak istiyorum. Napolyon'u durdurmak i√ßin elimizden geleni yapmalƒ±yƒ±z," dedi kararlƒ± bir ≈üekilde.

K√º√ß√ºk kƒ±z karde≈üi Natasha ise endi≈üeliydi. O hen√ºz on √º√ß ya≈üƒ±ndaydƒ±, ama √ßok hassas ve akƒ±llƒ± bir kƒ±zdƒ±.

B√ñL√úM 3
Pierre Bezukhov

Pierre Bezukhov, Count Bezukhov'un gayrime≈üru oƒüluydu. √áok zengin olmasƒ±na raƒümen, kendini mutsuz ve kayƒ±p hissediyordu. O d√∂nemin felsef√Æ akƒ±mlarƒ±na ilgi duyuyordu.

"Bu sava≈ü neyi √ß√∂zecek?" diye d√º≈ü√ºn√ºyordu Pierre. "ƒ∞nsanlar neden birbirini √∂ld√ºrmeye bu kadar istekli?"

O, Anna Pavlovna'nƒ±n soir√©e'sine katƒ±lmƒ±≈ütƒ± ve oradaki sohbetleri dinliyordu. Soylularƒ±n sava≈ü konusundaki heyecanlarƒ± onu rahatsƒ±z ediyordu.

"Belki de bu sava≈ü gerekli," dedi kendi kendine. "Ama ke≈üke barƒ±≈ü√ßƒ±l yollarla √ß√∂z√ºlebilseydi..."

Bu gece, Pierre'nin hayatƒ± deƒüi≈üecekti...
''';
  }

  String _getCalikusuContent() {
    return '''
Bƒ∞Rƒ∞NCƒ∞ KISIM

Feride on yedi ya≈üƒ±ndaydƒ±. ƒ∞stanbul'da, Erenk√∂y'deki evlerinde ya≈üƒ±yordu. Babasƒ± Faiz Bey, eskiden varlƒ±klƒ± bir aile ferdi olmasƒ±na raƒümen, artƒ±k maddi sƒ±kƒ±ntƒ±lar √ßekiyordu.

Bu sabah Feride pencereden Marmara'yƒ± seyrediyordu. Deniz √ßok sakindi ve g√ºne≈üin altƒ±nda pƒ±rƒ±l pƒ±rƒ±l parlƒ±yordu.

"Ne yapacaƒüƒ±m ben?" diye d√º≈ü√ºn√ºyordu. "Babam beni evlendirmek istiyor, ama ben hen√ºz √ßok gencim."

Feride √ßok g√ºzel bir kƒ±zdƒ±. Uzun kumral sa√ßlarƒ±, ye≈üil g√∂zleri ve narin yapƒ±sƒ±yla ƒ∞stanbul'un en g√ºzel kƒ±zlarƒ±ndan biriydi. Ama g√ºzelliƒüi onu mutlu etmiyordu.

"√ñƒüretmen olmak istiyorum," diye mƒ±rƒ±ldandƒ±. "Belki b√∂yle kendi ayaklarƒ±m √ºzerinde durabilirim."

Bƒ∞Rƒ∞NCƒ∞ B√ñL√úM
Karar

Faiz Bey o ak≈üam eve geldiƒüinde m√ºjdeli haberini verdi:

"Feride, kƒ±zƒ±m! Sana √ßok iyi bir kƒ±smet √ßƒ±ktƒ±. M√ºnir Bey'in oƒülu Kemal senle evlenmek istiyor."

Feride'nin y√ºz√º bembeyaz oldu. "Baba, ben hen√ºz evlenecek ya≈üta deƒüilim."

"Sa√ßmalama kƒ±zƒ±m. Sen artƒ±k b√ºy√ºk bir hanƒ±mefendisin. Kemal Bey √ßok iyi bir aile √ßocuƒüu, hem de zengin."

"Ama baba, ben onu sevmiyorum. Hem de ben √∂ƒüretmen olmak istiyorum."

Faiz Bey sinirlenmeye ba≈üladƒ±. "√ñƒüretmenlik! Bu ne bi√ßim d√º≈ü√ºnce? Bir hanƒ±mefendiye yakƒ±≈üƒ±r mƒ± √∂ƒüretmenlik yapmak?"

ƒ∞Kƒ∞NCƒ∞ B√ñL√úM
Ka√ßƒ±≈ü

Feride o gece uzun uzun d√º≈ü√ºnd√º. Babasƒ± onu zorla evlendirecekti, ama o buna razƒ± deƒüildi. Tek √ßare vardƒ±: ka√ßmak.

Ertesi sabah erkenden kalktƒ± ve bavuluna birka√ß e≈üya koydu. Annesinin eski m√ºcevherlerinden birka√ßƒ±nƒ± da aldƒ±. Bu paralarla bir s√ºre idare edebilirdi.

"Anadolu'da bir kasabada √∂ƒüretmenlik yapacaƒüƒ±m," diye d√º≈ü√ºnd√º. "Orada kimse beni tanƒ±maz ve √∂zg√ºrce ya≈üayabilirim."

ƒ∞stanbul'dan Anadolu'ya gidecek vapura binerken kalbi hƒ±zla √ßarpƒ±yordu. Bu b√ºy√ºk bir maceraydƒ± ve ne ile kar≈üƒ±la≈üacaƒüƒ±nƒ± bilmiyordu.

"Allah'ƒ±m, bana yardƒ±m et," diye dua etti sessizce.

Vapur d√ºd√ºk √ßaldƒ± ve yava≈ü yava≈ü ƒ∞stanbul'dan uzakla≈ütƒ±. Feride arkasƒ±na bakmadƒ±. Artƒ±k yeni bir hayat ba≈ülƒ±yordu...
''';
  }

  String _getVadidekiZambakContent() {
    return '''
Bƒ∞Rƒ∞NCƒ∞ B√ñL√úM

F√©lix de Vandenesse yirmi iki ya≈üƒ±nda gen√ß, yakƒ±≈üƒ±klƒ± bir asilzadeydi. Tours yakƒ±nlarƒ±ndaki Clochegourde ≈üatosuna geldiƒüi o bahar g√ºn√º, hayatƒ±nƒ±n en √∂nemli anƒ±nƒ± ya≈üayacaƒüƒ±nƒ± bilmiyordu.

Bah√ßede y√ºr√ºrken, g√ºzel bir kadƒ±nƒ±n beyaz elbisesiyle zambaklar arasƒ±nda durduƒüunu g√∂rd√º. Bu kadƒ±n Henriette de Mortsauf'tu - evli, iki √ßocuk annesi ve F√©lix'ten altƒ± ya≈ü b√ºy√ºk.

"Madame," dedi F√©lix, ≈üapkasƒ±nƒ± √ßƒ±kararak. "Bu g√ºzel bah√ßenizde kaybolmu≈üum. Beni affeder misiniz?"

Henriette d√∂nd√º ve ona baktƒ±. O an, ikisinin de hayatƒ± deƒüi≈üti. G√∂zleri bulu≈ütuƒüunda, tarif edilemez bir ≈üey oldu.

"Tabii ki, Monsieur. Burasƒ± Clochegourde. Ben Madame de Mortsauf."

F√©lix'in kalbi √ßƒ±lgƒ±nca atmaya ba≈üladƒ±. Bu kadƒ±nda √∂yle bir g√ºzellik, √∂yle bir zarafet vardƒ± ki...

ƒ∞Kƒ∞NCƒ∞ B√ñL√úM
Yasak A≈ük

G√ºnler ge√ßti. F√©lix her g√ºn ≈üatoya gelmeye ba≈üladƒ±. Henriette'in kocasƒ± Monsieur de Mortsauf ya≈ülƒ± ve hastalƒ±klƒ± bir adamdƒ±. √áocuklarƒ± Jacques ve Madeleine ile ilgilenirken, Henriette √ßok yorgun d√º≈ü√ºyordu.

"Siz buraya gelince evimiz aydƒ±nlanƒ±yor," dedi Henriette bir g√ºn. "F√©lix, siz √ßok iyi bir arkada≈üsƒ±nƒ±z."

Ama F√©lix'in hisleri arkada≈ülƒ±ktan √ßok daha derinleriyle geliyordu. O Henriette'e a≈üƒ±ktƒ±, ama bu a≈ükƒ±nƒ± hi√ßbir zaman a√ßƒ±k√ßa s√∂yleyemiyordu.

"Henriette," diye mƒ±rƒ±ldandƒ± bir g√ºn yalnƒ±zken. "Sizi seviyorum, ama bu yasak bir a≈ük. Siz evlisiniz ve ben sadece gen√ß bir adamƒ±m."

√ú√á√úNC√ú B√ñL√úM
Mektuplar

F√©lix Paris'e d√∂nmek zorunda kaldƒ±ƒüƒ±nda, Henriette ile mektuplamaya ba≈üladƒ±lar. Bu mektuplar iki kalbin en derin duygularƒ±nƒ± i√ßeriyordu.

"Sevgili F√©lix," yazƒ±yordu Henriette, "sizin dostluƒüunuz benim hayatƒ±mƒ±n en deƒüerli hazinesi. L√ºtfen beni unutmayƒ±n."

F√©lix de ona ≈üu satƒ±rlarƒ± yazƒ±yordu: "Henriette, siz benim ruhuma i≈ülemi≈ü bir zambaksƒ±nƒ±z. Sizin yanƒ±nƒ±zda olmadƒ±ƒüƒ±m her an, sanki √∂l√º gibiyim."

Ama bu a≈ük hi√ßbir zaman ger√ßekle≈üemeyecekti. Toplumun kurallarƒ±, ahlaki deƒüerler ve Henriette'in evli olmasƒ±... Hepsi bu a≈ükƒ±n √∂n√ºnde b√ºy√ºk engellerdi.

F√©lix bu acƒ±yƒ± kalbinde ta≈üƒ±yacak, Henriette ise vazifesini yerine getirmeye devam edecekti...
''';
  }

  String _getKucukPrensContent() {
    return '''
B√ñL√úM I

Altƒ± ya≈üƒ±ndayken, "Ya≈üanmƒ±≈ü Hikayeler" adlƒ± virgin ormanlar hakkƒ±ndaki bir kitapta muhte≈üem bir resim g√∂rd√ºm. Bir boa yƒ±lanƒ±nƒ±n vah≈üi bir hayvanƒ± yuttuƒüu resimdi.

Kitapta ≈ü√∂yle yazƒ±yordu: "Boa yƒ±lanlarƒ± avlarƒ±nƒ± b√ºt√ºn halinde yutarlar, √ßiƒünemezler. Sonra artƒ±k hareket edemezler ve altƒ± ay uyuyarak sindirim yaparlar."

Bu konuyu √ßok d√º≈ü√ºnd√ºm ve renkli kalemimle ilk resmimi √ßizdim. 1 numaralƒ± √ßizimim b√∂yleydi:

≈ûaheserimi b√ºy√ºklere g√∂sterdim ve onlara ≈üapkanƒ±n korkutucu olup olmadƒ±ƒüƒ±nƒ± sordum.

Bana ≈üu kar≈üƒ±lƒ±ƒüƒ± verdiler: "≈ûapka neden korkutucu olsun?"

Benim resmim ≈üapka deƒüildi. Bir fili sindiren boa yƒ±lanƒ±ydƒ±. Bunun √ºzerine b√ºy√ºklerin anlayabilmesi i√ßin boa yƒ±lanƒ±nƒ±n i√ßini √ßizdim. B√ºy√ºkler hep a√ßƒ±klama isterler. 2 numaralƒ± √ßizimim ≈ü√∂yleydi:

B√ñL√úM II

B√∂ylece altƒ± ya≈üƒ±nda parlak bir kariyeri - ressam kariyerimi - bƒ±raktƒ±m. 1 ve 2 numaralƒ± √ßizimlerimin ba≈üarƒ±sƒ±zlƒ±ƒüƒ± beni cesaret kƒ±rmƒ±≈ütƒ±.

B√ºy√ºkler hi√ßbir ≈üeyi kendileri anlayamazlar. √áocuklar i√ßin onlara durmadan a√ßƒ±klama yapmak √ßok yorucu bir i≈ütir.

Bu nedenle ba≈üka bir meslek se√ßmek zorunda kaldƒ±m ve pilot olmayƒ± √∂ƒürendim. D√ºnyanƒ±n her tarafƒ±nda u√ßtum. Ger√ßekten de coƒürafya bana √ßok i≈üe yaradƒ±.

√áin ile Arizona'yƒ± bir bakƒ±≈üta ayƒ±rt edebiliyordum. Gecenin ortasƒ±nda kaybolursanƒ±z, bu √ßok yararlƒ±dƒ±r.

B√ñL√úM III

Hayatƒ±m boyunca ciddi insanlarla √ßok kar≈üƒ±la≈ütƒ±m. B√ºy√ºkler arasƒ±nda uzun zaman ya≈üadƒ±m. Onlarƒ± √ßok yakƒ±ndan tanƒ±dƒ±m. Bu da d√º≈ü√ºncemi pek deƒüi≈ütirmedi.

Ne zaman akƒ±llƒ± biriyle kar≈üƒ±la≈ütƒ±ysam, ona hep 1 numaralƒ± √ßizimimi g√∂sterdim. Bu √ßizimi hep yanƒ±mda ta≈üƒ±rƒ±m. Ger√ßekten anlayƒ±≈ülƒ± biri olup olmadƒ±ƒüƒ±nƒ± √∂ƒürenmek isterdim.

Ama hep ≈üu kar≈üƒ±lƒ±ƒüƒ± alƒ±rdƒ±m: "Bu bir ≈üapka."

O zaman ne boa yƒ±lanlarƒ±ndan, ne virgin ormanlardan, ne de yƒ±ldƒ±zlardan bahsederdim. Onun seviyesine inerdim. Bri√ß, golf, politika ve kravatlardan konu≈üurdum. O zaman da bu b√ºy√ºk adamƒ±, b√∂ylesine akƒ±llƒ± bir adam tanƒ±dƒ±ƒüƒ± i√ßin √ßok memnun olurdu.

B√ñL√úM IV

Sahara √ß√∂l√ºnde motor arƒ±zasƒ± nedeniyle zorunlu ini≈ü yapmƒ±≈ütƒ±m. Yanƒ±mda ne bir teknisyen, ne de bir yolcu vardƒ±. Zor bir tamiri tek ba≈üƒ±ma yapmaya giri≈üecektim.

Bu benim i√ßin √∂l√ºm kalƒ±m meselesiydi. ƒ∞√ßecek suyum ancak sekiz g√ºn yetecekti.

ƒ∞lk gece kum √ºzerinde, binlerce kilometre uzakta herhangi bir yerde, denizin ortasƒ±nda sal √ºzerindeki gemi kazasƒ± ge√ßirmi≈ülerden daha yalnƒ±z uyudum.

G√ºn doƒüarken tuhaf, k√º√ß√ºk bir sesin beni uyandƒ±rdƒ±ƒüƒ±nƒ± d√º≈ü√ºnebilirsiniz:

"L√ºtfen... bana bir koyun √ßizer misin?"

"Hƒ±ƒ±!"

"Bana bir koyun √ßizer misin..."
''';
  }
}
